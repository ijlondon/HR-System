package com.rit.group2.services;

import java.util.ArrayList;
import java.util.Set;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.rit.group2.models.BasicEmployee;
import com.rit.group2.models.Department;
import com.rit.group2.models.Employee;
import com.rit.group2.repositories.DepartmentRepository;
import com.rit.group2.repositories.EmployeeRepository;
import com.rit.group2.responses.ErrorResponse;
import com.rit.group2.responses.Response;
import com.rit.group2.responses.SuccessfulResponse;

@Service("employeeService")
public class EmployeeService {

	@Autowired
	EmployeeRepository employeeRepository;
	
	@Autowired
	DepartmentRepository departmentRepository;

	public EmployeeService(){}

	public Response createEmployee(Employee employee) {
		employeeRepository.save(employee);
		return new SuccessfulResponse("Successfully Created Employee", employee);
	}

	public Response getEmployee(int employeeId) {
		Employee employee = employeeRepository.findById(employeeId);
		if(employee == null){
			return new ErrorResponse("Unable to find employee");
		}
		return new SuccessfulResponse("Successfully found emplyee", employee);
	}

	public Response editEmployee(int employeeId, Employee employeeEdits) {
		Employee originalEmployee = employeeRepository.findById(employeeId);
		if(originalEmployee == null){
			return new ErrorResponse("Unable to find employee");
		}
		if(employeeEdits.getFirstName() != null){
			originalEmployee.setFirstName(employeeEdits.getFirstName());
		}
		if(employeeEdits.getLastName() != null){
			originalEmployee.setLastName(employeeEdits.getLastName());
		}
		if(employeeEdits.getAddress().getStreet() != null){
			originalEmployee.getAddress().setStreet(employeeEdits.getAddress().getStreet());
		}
		if(employeeEdits.getAddress().getCity() != null){
			originalEmployee.getAddress().setCity(employeeEdits.getAddress().getCity());
		}
		if(employeeEdits.getAddress().getState() != null){
			originalEmployee.getAddress().setState(employeeEdits.getAddress().getState());
		}
		if(employeeEdits.getAddress().getZip() != 0){
			originalEmployee.getAddress().setZip(employeeEdits.getAddress().getZip());
		}
		if(employeeEdits.getTelephone() != null){
			originalEmployee.setTelephone(employeeEdits.getTelephone());
		}
		if(employeeEdits.getEmail() != null){
			originalEmployee.setEmail(employeeEdits.getEmail());
		}
		employeeRepository.save(originalEmployee);
		return new SuccessfulResponse("Succesfully edited Employee", originalEmployee);
	}

	public Response terminateEmployee(int employeeId) {
		Employee employee = employeeRepository.findById(employeeId);
		if(employee == null){
			return new ErrorResponse("Unable to find employee");
		}
		employee.terminate();
		employeeRepository.save(employee);
		return new SuccessfulResponse("Successfully terminated Employee", employee);
	}

	public Response changeDepartments(int employeeId, int newDepartmentId) {
		Department department = departmentRepository.findById(newDepartmentId);
		Employee employee = employeeRepository.findById(employeeId);
		if(department == null || employee == null){
			return new ErrorResponse("Unable to find employee and/or department");
		}
		employee.setDepartment(department);
		employeeRepository.save(employee);
		return new SuccessfulResponse("Successfully changed department", employee);
	}

	public Response search(String searchQuery) {
		if(searchQuery == null){
			return new ErrorResponse("Search Query was empty");
		}
		ArrayList<BasicEmployee> employeesFound = new ArrayList<>();
		for(Employee employee: employeeRepository.findAll()){
			String[] searchedFields = {
				employee.getFirstName() + ' ' + employee.getLastName(), // Full Name
				employee.getTelephone(),
				employee.getEmail()
			};
			boolean matchingField = false;
			for (String field : searchedFields) {
				if (field.toLowerCase().contains(searchQuery.toLowerCase())) {
					matchingField = true;
				}
			}
			if (matchingField) {
				employeesFound.add(new BasicEmployee(employee));					
			}
	}
		return new SuccessfulResponse("Found " + employeesFound.size() + " matches", employeesFound);
	}

	public Response getAll() {
		ArrayList<BasicEmployee> employees = new ArrayList<>();
		for(Employee employee: employeeRepository.findAll()){
			if(employee.getActive()){
				employees.add(new BasicEmployee(employee));
			}
		}
		return new SuccessfulResponse("Retrieved all employees", employees);
	}



}
